From a5b8bfb2f01a094e40d3639647e11635e740b686 Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Mon, 2 Oct 2023 16:35:22 +0200
Subject: [PATCH] twister: support 'attach_serial_after_flash' in hardware map

So far twister attached to serial automatically before flashing device.
This does not work with platforms and runners (e.g. 'esp32_devkitc_wroom'
board with 'esp32' runner) that require the same serial port for flashing
as it is used by twister. In such case flashing operation fails due to
serial device being occupied by twister.

Introduce 'attach_serial_after_flash' boolean property in hardware map,
which is 'false' by default. When setting it to 'true' in hardware map,
twister will attach to serial after successful flash operation.

This allows to successfully test esp32_devkitc_wroom with hello_world:

  $ scripts/twister -p esp32_devkitc_wroom -T samples/hello_world \
    --device-testing --hardware-map map.yaml

where map.yaml contains:

  attach_serial_after_flash: true

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 scripts/pylib/twister/twisterlib/handlers.py  | 61 ++++++++++++-------
 .../pylib/twister/twisterlib/hardwaremap.py   |  4 ++
 scripts/pylib/twister/twisterlib/runner.py    |  2 +-
 scripts/schemas/twister/hwmap-schema.yaml     |  3 +
 subsys/net/conn_mgr/events_handler.c          |  4 +-
 5 files changed, 48 insertions(+), 26 deletions(-)

diff --git a/scripts/pylib/twister/twisterlib/handlers.py b/scripts/pylib/twister/twisterlib/handlers.py
index 780b51cb7d..fd991aa802 100755
--- a/scripts/pylib/twister/twisterlib/handlers.py
+++ b/scripts/pylib/twister/twisterlib/handlers.py
@@ -630,23 +630,33 @@ class DeviceHandler(Handler):
         if hardware.flash_with_test:
             flash_timeout += self.get_test_timeout()
 
-        try:
-            ser = self._create_serial_connection(
-                serial_device,
-                hardware.baud,
-                flash_timeout,
-                serial_pty,
-                ser_pty_process
-            )
-        except serial.SerialException:
-            return
+        def create_serial_connection():
+            try:
+                ser = self._create_serial_connection(
+                    serial_device,
+                    hardware.baud,
+                    flash_timeout,
+                    serial_pty,
+                    ser_pty_process
+                )
+            except serial.SerialException:
+                return
 
-        halt_monitor_evt = threading.Event()
+            halt_monitor_evt = threading.Event()
+
+            t = threading.Thread(target=self.monitor_serial, daemon=True,
+                                 args=(ser, halt_monitor_evt, harness))
+            t.start()
+
+            return ser, halt_monitor_evt, t
+
+        ser = None
+        halt_monitor_evt = None
+
+        if not hardware.attach_serial_after_flash:
+            ser, halt_monitor_evt, t = create_serial_connection()
 
-        t = threading.Thread(target=self.monitor_serial, daemon=True,
-                             args=(ser, halt_monitor_evt, harness))
         start_time = time.time()
-        t.start()
 
         d_log = "{}/device.log".format(self.instance.build_dir)
         logger.debug('Flash command: %s', command)
@@ -665,7 +675,8 @@ class DeviceHandler(Handler):
                         flash_error = True
                         with open(d_log, "w") as dlog_fp:
                             dlog_fp.write(stderr.decode())
-                        halt_monitor_evt.set()
+                        if ser:
+                            halt_monitor_evt.set()
                 except subprocess.TimeoutExpired:
                     logger.warning("Flash operation timed out.")
                     self.terminate(proc)
@@ -687,6 +698,8 @@ class DeviceHandler(Handler):
             self.run_custom_script(post_flash_script, 30)
 
         if not flash_error:
+            if not ser:
+                ser, halt_monitor_evt, t = create_serial_connection()
             # Always wait at most the test timeout here after flashing.
             t.join(self.get_test_timeout())
         else:
@@ -695,15 +708,16 @@ class DeviceHandler(Handler):
             # to close the serial. But it is necessary
             # for this thread being run first and close
             # have the change to close the serial.
-            t.join(0.1)
+            if ser:
+                t.join(0.1)
 
-        if t.is_alive():
+        if ser and t.is_alive():
             logger.debug("Timed out while monitoring serial output on {}".format(self.instance.platform.name))
 
-        if ser.isOpen():
+        if ser and ser.isOpen():
             ser.close()
 
-        if serial_pty:
+        if ser and serial_pty:
             ser_pty_process.terminate()
             outs, errs = ser_pty_process.communicate()
             logger.debug("Process {} terminated outs: {} errs {}".format(serial_pty, outs, errs))
@@ -717,10 +731,11 @@ class DeviceHandler(Handler):
         if post_script:
             self.run_custom_script(post_script, 30)
 
-        if serial_pty:
-            self.make_device_available(serial_pty)
-        else:
-            self.make_device_available(serial_device)
+        if ser:
+           if serial_pty:
+               self.make_device_available(serial_pty)
+           else:
+               self.make_device_available(serial_device)
 
 
 class QEMUHandler(Handler):
diff --git a/scripts/pylib/twister/twisterlib/hardwaremap.py b/scripts/pylib/twister/twisterlib/hardwaremap.py
index 5e90b7c84c..e8167035a8 100644
--- a/scripts/pylib/twister/twisterlib/hardwaremap.py
+++ b/scripts/pylib/twister/twisterlib/hardwaremap.py
@@ -39,6 +39,7 @@ class DUT(object):
                  id=None,
                  serial=None,
                  serial_baud=None,
+                 attach_serial_after_flash=None,
                  platform=None,
                  product=None,
                  serial_pty=None,
@@ -53,6 +54,7 @@ class DUT(object):
 
         self.serial = serial
         self.baud = serial_baud or 115200
+        self.attach_serial_after_flash = attach_serial_after_flash
         self.platform = platform
         self.serial_pty = serial_pty
         self._counter = Value("i", 0)
@@ -235,6 +237,7 @@ class HardwareMap:
             runner_params = dut.get('runner_params')
             serial_pty = dut.get('serial_pty')
             serial = dut.get('serial')
+            attach_serial_after_flash = dut.get('attach_serial_after_flash')
             baud = dut.get('baud', None)
             product = dut.get('product')
             fixtures = dut.get('fixtures', [])
@@ -249,6 +252,7 @@ class HardwareMap:
                           serial_pty=serial_pty,
                           serial=serial,
                           serial_baud=baud,
+                          attach_serial_after_flash=attach_serial_after_flash,
                           connected=connected,
                           pre_script=pre_script,
                           post_script=post_script,
diff --git a/scripts/pylib/twister/twisterlib/runner.py b/scripts/pylib/twister/twisterlib/runner.py
index ef41084cdd..fbffa817bb 100644
--- a/scripts/pylib/twister/twisterlib/runner.py
+++ b/scripts/pylib/twister/twisterlib/runner.py
@@ -1052,7 +1052,7 @@ class ProjectBuilder(FilterBuilder):
             harness = HarnessImporter.get_harness(instance.testsuite.harness.capitalize())
             harness.configure(instance)
             if isinstance(harness, Pytest):
-                harness.pytest_run(instance.handler.timeout)
+                harness.pytest_run(instance.handler.get_test_timeout())
             else:
                 instance.handler.handle(harness)
 
diff --git a/scripts/schemas/twister/hwmap-schema.yaml b/scripts/schemas/twister/hwmap-schema.yaml
index 3ecb064ddf..6e79b5da97 100644
--- a/scripts/schemas/twister/hwmap-schema.yaml
+++ b/scripts/schemas/twister/hwmap-schema.yaml
@@ -38,6 +38,9 @@ sequence:
       "serial":
         type: str
         required: false
+      "attach_serial_after_flash":
+        type: bool
+        required: false
       "baud":
         type: int
         required: false
diff --git a/subsys/net/conn_mgr/events_handler.c b/subsys/net/conn_mgr/events_handler.c
index c02787bf4f..7bf10602c4 100644
--- a/subsys/net/conn_mgr/events_handler.c
+++ b/subsys/net/conn_mgr/events_handler.c
@@ -24,7 +24,7 @@ static void conn_mgr_iface_events_handler(struct net_mgmt_event_callback *cb,
 {
 	int idx;
 
-	NET_DBG("Iface event %u received on iface %d (%p)", mgmt_event,
+	NET_DBG("Iface event %x received on iface %d (%p)", mgmt_event,
 		net_if_get_by_iface(iface), iface);
 
 	if ((mgmt_event & CONN_MGR_IFACE_EVENTS_MASK) != mgmt_event) {
@@ -120,7 +120,7 @@ static void conn_mgr_ipv4_events_handler(struct net_mgmt_event_callback *cb,
 {
 	int idx;
 
-	NET_DBG("IPv4 event %u received on iface %d (%p)", mgmt_event,
+	NET_DBG("IPv4 event %x received on iface %d (%p)", mgmt_event,
 		net_if_get_by_iface(iface), iface);
 
 	if ((mgmt_event & CONN_MGR_IPV4_EVENTS_MASK) != mgmt_event) {
-- 
2.42.0


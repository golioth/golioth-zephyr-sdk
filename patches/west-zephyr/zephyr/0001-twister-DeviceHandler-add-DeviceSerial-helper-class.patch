From 6ca8373cee92143f772969d65681107ea9cd4726 Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Mon, 12 Sep 2022 19:34:18 +0200
Subject: [PATCH] twister: DeviceHandler: add DeviceSerial helper class

Split low-level device serial handling from other code.

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 scripts/pylib/twister/twisterlib/handlers.py | 190 +++++++++++--------
 1 file changed, 112 insertions(+), 78 deletions(-)

diff --git a/scripts/pylib/twister/twisterlib/handlers.py b/scripts/pylib/twister/twisterlib/handlers.py
index a390e558f2..2d554e69ec 100755
--- a/scripts/pylib/twister/twisterlib/handlers.py
+++ b/scripts/pylib/twister/twisterlib/handlers.py
@@ -332,23 +332,29 @@ class SimulationHandler(BinaryHandler):
             self.binary = os.path.join(instance.build_dir, "zephyr", "zephyr.exe")
             self.ready = True
 
-class DeviceHandler(Handler):
-
-    def __init__(self, instance, type_str):
-        """Constructor
-
-        @param instance Test Instance
-        """
-        super().__init__(instance, type_str)
-
-    def monitor_serial(self, ser, halt_event, harness):
+class DeviceSerial:
+    class SerialError(RuntimeError):
+        pass
+
+    def __init__(self, hardware, timeout):
+        self.hardware = hardware
+        self.timeout = timeout
+        self.serial = None
+        self.halt_event = threading.Event()
+        self.thread = None
+        self.pty_process = None
+
+    def monitor_serial(self, harness, log, coverage):
         if harness.is_pytest:
             harness.handle(None)
             return
 
-        log_out_fp = open(self.log, "wt")
+        ser = self.serial
+        halt_event = self.halt_event
 
-        if self.options.coverage:
+        log_out_fp = open(log, "wt")
+
+        if coverage:
             # Set capture_coverage to True to indicate that right after
             # test results we should get coverage data, otherwise we exit
             # from the test.
@@ -409,6 +415,82 @@ class DeviceHandler(Handler):
 
         log_out_fp.close()
 
+    @property
+    def device(self):
+        if self.hardware.serial_pty:
+            return self.hardware.serial_pty
+
+        return self.hardware.serial
+
+    def start(self, harness, log, coverage):
+        if self.hardware.serial_pty:
+            master, slave = pty.openpty()
+            try:
+                self.pty_process = subprocess.Popen(re.split(',| ', self.hardware.serial_pty),
+                                                    stdout=master, stdin=master, stderr=master)
+            except subprocess.CalledProcessError as error:
+                logger.error("Failed to run subprocess {}, error {}".format(self.hardware.serial_pty, error.output))
+                raise self.SerialError(error.output) from error
+
+            node = os.ttyname(slave)
+        else:
+            node = self.hardware.serial
+
+        logger.debug(f"Using serial device {node} @ {self.hardware.baud} baud")
+
+        try:
+            self.serial = serial.Serial(
+                node,
+                baudrate=self.hardware.baud,
+                parity=serial.PARITY_NONE,
+                stopbits=serial.STOPBITS_ONE,
+                bytesize=serial.EIGHTBITS,
+                timeout=self.timeout
+            )
+        except serial.SerialException as e:
+            logger.error("Serial device error: %s" % (str(e)))
+
+            if self.hardware.serial_pty and self.pty_process:
+                self.pty_process.terminate()
+                outs, errs = self.pty_process.communicate()
+                logger.debug("Process {} terminated outs: {} errs {}".format(self.hardware.serial_pty, outs, errs))
+
+            raise self.SerialError(str(e)) from e
+
+        self.serial.flush()
+
+        self.read_pipe, self.write_pipe = os.pipe()
+
+        self.thread = threading.Thread(target=self.monitor_serial, daemon=True, args=(harness, log, coverage))
+        self.thread.start()
+
+    def stop(self, timeout):
+        if not self.thread:
+            return
+
+        self.thread.join(timeout)
+
+        if self.thread.is_alive():
+            logger.debug("Timed out while monitoring serial output on {}".format(self.hardware.platform))
+
+        if self.serial.isOpen():
+            self.serial.close()
+
+        if self.hardware.serial_pty:
+            self.pty_process.terminate()
+            outs, errs = self.pty_process.communicate()
+            logger.debug("Process {} terminated outs: {} errs {}".format(self.hardware.serial_pty, outs, errs))
+
+
+class DeviceHandler(Handler):
+
+    def __init__(self, instance, type_str):
+        """Constructor
+
+        @param instance Test Instance
+        """
+        super().__init__(instance, type_str)
+
     def device_is_available(self, instance):
         device = instance.platform.name
         fixture = instance.testsuite.harness_config.get("fixture")
@@ -469,22 +551,13 @@ class DeviceHandler(Handler):
             return
 
         runner = hardware.runner or self.options.west_runner
-        serial_pty = hardware.serial_pty
-
-        ser_pty_process = None
-        if serial_pty:
-            master, slave = pty.openpty()
-            try:
-                ser_pty_process = subprocess.Popen(re.split(',| ', serial_pty), stdout=master, stdin=master, stderr=master)
-            except subprocess.CalledProcessError as error:
-                logger.error("Failed to run subprocess {}, error {}".format(serial_pty, error.output))
-                return
 
-            serial_device = os.ttyname(slave)
-        else:
-            serial_device = hardware.serial
+        flash_timeout = hardware.flash_timeout
+        if hardware.flash_with_test:
+            flash_timeout += self.timeout
 
-        logger.debug(f"Using serial device {serial_device} @ {hardware.baud} baud")
+        # the worst case of no serial input
+        serial_device = DeviceSerial(hardware, max(flash_timeout, self.timeout))
 
         if (self.options.west_flash is not None) or runner:
             command = ["west", "flash", "--skip-rebuild", "-d", self.build_dir]
@@ -542,46 +615,21 @@ class DeviceHandler(Handler):
         if pre_script:
             self.run_custom_script(pre_script, 30)
 
-        flash_timeout = hardware.flash_timeout
-        if hardware.flash_with_test:
-            flash_timeout += self.timeout
+        harness_name = self.instance.testsuite.harness.capitalize()
+        harness_import = HarnessImporter(harness_name)
+        harness = harness_import.instance
+        harness.configure(self.instance)
 
         try:
-            ser = serial.Serial(
-                serial_device,
-                baudrate=hardware.baud,
-                parity=serial.PARITY_NONE,
-                stopbits=serial.STOPBITS_ONE,
-                bytesize=serial.EIGHTBITS,
-                timeout=max(flash_timeout, self.timeout)  # the worst case of no serial input
-            )
-        except serial.SerialException as e:
+            serial_device.start(harness, self.log, self.options.coverage)
+        except DeviceSerial.SerialError:
+            self.instance.add_missing_case_status("blocked", "Serial Device Error")
             self.instance.status = "failed"
             self.instance.reason = "Serial Device Error"
-            logger.error("Serial device error: %s" % (str(e)))
-
-            self.instance.add_missing_case_status("blocked", "Serial Device Error")
-            if serial_pty and ser_pty_process:
-                ser_pty_process.terminate()
-                outs, errs = ser_pty_process.communicate()
-                logger.debug("Process {} terminated outs: {} errs {}".format(serial_pty, outs, errs))
-
-            if serial_pty:
-                self.make_device_available(serial_pty)
-            else:
-                self.make_device_available(serial_device)
+            self.make_device_available(serial_device.device)
             return
 
-        harness_name = self.instance.testsuite.harness.capitalize()
-        harness_import = HarnessImporter(harness_name)
-        harness = harness_import.instance
-        harness.configure(self.instance)
-        halt_monitor_evt = threading.Event()
-
-        t = threading.Thread(target=self.monitor_serial, daemon=True,
-                             args=(ser, halt_monitor_evt, harness))
         start_time = time.time()
-        t.start()
 
         d_log = "{}/device.log".format(self.instance.build_dir)
         logger.debug('Flash command: %s', command)
@@ -600,7 +648,7 @@ class DeviceHandler(Handler):
                         flash_error = True
                         with open(d_log, "w") as dlog_fp:
                             dlog_fp.write(stderr.decode())
-                        halt_monitor_evt.set()
+                        serial_device.halt_event.set()
                 except subprocess.TimeoutExpired:
                     logger.warning("Flash operation timed out.")
                     self.terminate(proc)
@@ -613,7 +661,7 @@ class DeviceHandler(Handler):
                 dlog_fp.write(stderr.decode())
 
         except subprocess.CalledProcessError:
-            halt_monitor_evt.set()
+            serial_device.halt_event.set()
             self.instance.status = "error"
             self.instance.reason = "Device issue (Flash error)"
             flash_error = True
@@ -623,25 +671,14 @@ class DeviceHandler(Handler):
 
         if not flash_error:
             # Always wait at most the test timeout here after flashing.
-            t.join(self.timeout)
+            serial_device.stop(self.timeout)
         else:
             # When the flash error is due exceptions,
             # twister tell the monitor serial thread
             # to close the serial. But it is necessary
             # for this thread being run first and close
             # have the change to close the serial.
-            t.join(0.1)
-
-        if t.is_alive():
-            logger.debug("Timed out while monitoring serial output on {}".format(self.instance.platform.name))
-
-        if ser.isOpen():
-            ser.close()
-
-        if serial_pty:
-            ser_pty_process.terminate()
-            outs, errs = ser_pty_process.communicate()
-            logger.debug("Process {} terminated outs: {} errs {}".format(serial_pty, outs, errs))
+            serial_device.stop(0.1)
 
         handler_time = time.time() - start_time
 
@@ -666,10 +703,7 @@ class DeviceHandler(Handler):
         if post_script:
             self.run_custom_script(post_script, 30)
 
-        if serial_pty:
-            self.make_device_available(serial_pty)
-        else:
-            self.make_device_available(serial_device)
+        self.make_device_available(serial_device.device)
 
 class QEMUHandler(Handler):
     """Spawns a thread to monitor QEMU output from pipes
-- 
2.40.0

